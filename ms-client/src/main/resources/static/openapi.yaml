openapi: 3.0.1
info:
  title: ms-client API
  description: API for managing clients.
  version: 1.0
servers:
  - url: http://localhost:8082
    description: Generated server url
paths:
  /api/v1/client/{id}:
    get:
      tags:
        - Client API
      summary: Find a user by ID
      description: Retrieve a user's data by their unique ID.
      operationId: findClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
    put:
      tags:
        - Client API
      summary: Update a user by ID
      description: Update an existing user's data using their unique ID.
      operationId: updateClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateDTO'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
    delete:
      tags:
        - Client API
      summary: Delete a user by ID
      description: Delete a user from the system using their unique ID.
      operationId: deleteClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: string
  /api/v1/client/email/{email}:
    get:
      tags:
        - Client API
      summary: Find a user by email
      description: Retrieve a user's data using their email
      operationId: findClientByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
    put:
      tags:
        - Client API
      summary: Update a user by email
      description: Update an existing user's data using their email
      operationId: updateClientByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateDTO'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
  /api/v1/client:
    get:
      tags:
        - Client API
      summary: Find all clients
      description: Retrieve all users and their data
      operationId: findAllClients
      responses:
        '200':
          description: Users found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: Users not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientResponseDTO'
    post:
      tags:
        - Client API
      summary: Create a User
      description: Create a new User and save it in the sistem
      operationId: createClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreateDTO'
        required: true
      responses:
        '201':
          description: User registered sucessful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '422':
          description: User can't be created by Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
components:
  schemas:
    ClientCreateDTO:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    ClientResponseDTO:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
