openapi: 3.0.1
info:
  title: ms-order API
  description: API for managing orders.
  version: 1.0
servers:
  - url: http://localhost:8081
    description: Generated server url
paths:
  /api/v1/order:
    post:
      tags:
        - Order API
      summary: Create a new order
      description: Creates a new order in the system.
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateDTO'
        required: true
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '422':
          description: Order can't be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
  /api/v1/order/update/{id}:
    put:
      tags:
        - Order API
      summary: Update an existing order
      description: updates an existing order's data by providing the order ID and the new data.
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: Long
            example: 1
          description: The ID of the order to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateDTO'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '400':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/v1/order/historic/byEmail/{email}:
    get:
      tags:
        - Order API
      summary: Find orders by email
      description: Fetches all orders associated with a email.
      operationId: findOrdersByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found for the email
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /api/v1/order/historic/byProtocol/{protocol}:
    get:
      tags:
        - Order API
      summary: Find orders by protocol
      description: Fetches the order associated with a protocol.
      operationId: findOrderByProtocol
      parameters:
        - name: protocol
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '404':
          description: No order found for the protocol
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/v1/order/historic/byId/{id}:
    get:
      tags:
        - Order API
      summary: Find order by ID
      description: Fetches the order associated with the ID.
      operationId: findOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/v1/order/product/{id}:
    get:
      tags:
        - Order API
      summary: Find product by id
      description: Fetch product associated by this id.
      operationId: findProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: Long
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No product found for the id
          content:
            application/json:

              schema:
                $ref: '#/components/schemas/Order'
  /api/v1/order/{id}:
    delete:
      tags:
        - Order API
      summary: Delete order by ID
      description: Deletes the order associated with the given ID.
      operationId: deleteOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        clientEmail:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        quantity:
          type: integer
          format: int32
