openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8081
    description: Generated server url
paths:
  /api/v1/order/update/{id}:
    put:
      tags:
        - order-controller
      summary: Update an existing order
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateDTO'
        required: true
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/order:
    post:
      tags:
        - order-controller
      summary: Create a new order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateDTO'
        required: true
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/order/product/{id}:
    get:
      tags:
        - order-controller
      summary: Get product by ID
      operationId: findProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product found by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDTO'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/order/historic/byProtocol/{protocol}:
    get:
      tags:
        - order-controller
      summary: Get order by protocol
      operationId: findOrderByProtocol
      parameters:
        - name: protocol
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order found by protocol
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/order/historic/byId/{id}:
    get:
      tags:
        - order-controller
      summary: Get order by ID
      operationId: findOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order found by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/order/historic/byEmail/{email}:
    get:
      tags:
        - order-controller
      summary: Get all orders by email
      operationId: findOrdersByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponseDTO'
        '404':
          description: No orders found for this email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /api/v1/order/{id}:
    delete:
      tags:
        - order-controller
      summary: Delete order by ID
      operationId: deleteOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order deleted successfully
          content:
            '*/*':
              schema:
                type: string
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    OrderResponseDTO:
      required:
        - clientEmail
        - products
        - protocol
      type: object
      properties:
        id:
          type: integer
          format: int64
        protocol:
          type: string
        clientEmail:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponseDTO'
        _links:
          $ref: '#/components/schemas/Links'
    ProductResponseDTO:
      required:
        - name
        - quantity
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
          format: int32
    ErrorMessage:
      type: object
      properties:
        path:
          type: string
        method:
          type: string
        status:
          type: integer
          format: int32
        statusText:
          type: string
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string
    OrderCreateDTO:
      required:
        - clientEmail
        - products
      type: object
      properties:
        clientEmail:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        quantity:
          type: integer
          format: int32
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
